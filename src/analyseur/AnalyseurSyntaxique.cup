package analyseur;

import java_cup.runtime.*;
import java.util.*;

/*
* Copyright (C) 2013, Anthony Rey and Patricio Saraiva
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/

/**
* Analyseur Syntaxique
* @author Patricio Saraiva
* @author Anthony Rey <anthony.rey@etu.univ-savoie.fr>
*/
/* Actions du code */
action code {: 
	Boolean erreur = false;
	private static Boolean variable = false;
	private static Boolean existe = false;
	private static Hashtable<String, Integer> variables = new Hashtable<String,Integer>();
	private static Noeud arbre; // = new Noeud();
	
	private static int getHash(String name){
		if(variables.get(name) != null){
			return variables.get(name);
		}
		else{
			System.out.println("Variable " + name + " non definie");
			existe = true;
			return 0;
		}
		 
	}
 :} ;
parser code {:
	public void report_error(String message, Object info) {
		String m = "Erreur de syntaxe";
		if (info instanceof Symbol) {
			Symbol s = ((Symbol) info);
			if (s.left >= 0) /* Numero de ligne */
				m = m + " ligne : " + (s.left+1);
		}
		System.out.println(m);
	} 
:} ;
 

/* Symboles terminaux */
terminal PLUS, MOINS, MULT, DIVIDE, PAR_G, PAR_D,POINT_VIRGULE, MOD, UMOINS,  LET, EGAL;
terminal Noeud ARBRE; 
terminal String VARIABLE;

/* Symboles non terminaux */
non terminal seq_expressions, expression;
non terminal Noeud expr;
 
/* Precedences */
precedence left PLUS, MOINS;
precedence left MULT, DIVIDE, MOD;
precedence left UMOINS;
precedence left LET, EGAL, VARIABLE;

/* Grammaire */
seq_expressions::= expression seq_expressions | expression ;

expression::= expr:e
{: 	
	if(erreur){
		System.out.println("Division par zero impossible");
		erreur = false;
	}
	else if (existe){
		existe = false;
	}
	else if(variable){
		System.out.println("variable sauvegarde");
		variable = false;
	}
	else{
		e.show();
	} 
:} POINT_VIRGULE | error POINT_VIRGULE ;

expr::=MOINS expr:e
{:
	/*RESULT = new Integer(0 - e.valeur); */
:} %prec UMOINS |

expr:e1 PLUS expr:e2 
{:
	RESULT=new Noeud("+",e1,e2);
:} |

expr:e1 MOINS expr:e2 
{:
	RESULT=new Noeud("-",e1,e2);
:} |

expr:e1 MULT expr:e2
{:
	RESULT=new Noeud("*",e1,e2);
:} | 

expr:e1 MOD expr:e2
{:
	RESULT=new Noeud("%",e1,e2);
:} | 

expr:e1 DIVIDE expr:e2 
{: 
	if(true /*e2.intValue() != 0*/){
		RESULT=new Noeud("/",e1,e2);
	}
	else{
		RESULT = new Noeud("");
		erreur = true;
	}
:} | 

VARIABLE:identifiant 
{: 
	if (variables.containsKey(identifiant)){
   		RESULT= new Noeud(getHash(identifiant)+"");
   	}
    else
    {
		/*
        existe=true;
     	System.out.println("Erreur : caractere non autorise : " +identifiant);
     	RESULT= -1;
		*/
		RESULT= new Noeud("");
    }
:} |

LET VARIABLE:e1 EGAL expr:e2
{: 
	/*
	variables.put(e1,e2.intValue());
	variable = true; 
	RESULT = 0;
	*/
:} |	
	
ARBRE:n 
{: 
	RESULT=  n;
:} |

PAR_G expr:e PAR_D
{:
	RESULT=e;
:};
